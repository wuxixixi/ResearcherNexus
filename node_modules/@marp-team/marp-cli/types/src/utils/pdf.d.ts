import type { PDFDocument, PDFRef } from 'pdf-lib';
export declare const pdfLib: () => Promise<{
    default: typeof import("pdf-lib/dist/pdf-lib.min.js");
    PDFDocument: typeof PDFDocument;
    PDFFont: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFFont;
    PDFImage: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFImage;
    PDFPage: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFPage;
    PDFEmbeddedPage: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFEmbeddedPage;
    PDFJavaScript: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFJavaScript;
    PDFButton: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFButton;
    PDFCheckBox: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFCheckBox;
    PDFDropdown: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFDropdown;
    PDFField: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFField;
    PDFForm: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFForm;
    PDFOptionList: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFOptionList;
    PDFRadioGroup: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFRadioGroup;
    PDFSignature: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFSignature;
    PDFTextField: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFTextField;
    normalizeAppearance: <T>(appearance: T | import("pdf-lib/dist/pdf-lib.min.js").AppearanceMapping<T>) => import("pdf-lib/dist/pdf-lib.min.js").AppearanceMapping<T>;
    defaultCheckBoxAppearanceProvider: import("pdf-lib/dist/pdf-lib.min.js").AppearanceProviderFor<import("pdf-lib/dist/pdf-lib.min.js").PDFCheckBox>;
    defaultRadioGroupAppearanceProvider: import("pdf-lib/dist/pdf-lib.min.js").AppearanceProviderFor<import("pdf-lib/dist/pdf-lib.min.js").PDFRadioGroup>;
    defaultButtonAppearanceProvider: import("pdf-lib/dist/pdf-lib.min.js").AppearanceProviderFor<import("pdf-lib/dist/pdf-lib.min.js").PDFButton>;
    defaultTextFieldAppearanceProvider: import("pdf-lib/dist/pdf-lib.min.js").AppearanceProviderFor<import("pdf-lib/dist/pdf-lib.min.js").PDFTextField>;
    defaultDropdownAppearanceProvider: import("pdf-lib/dist/pdf-lib.min.js").AppearanceProviderFor<import("pdf-lib/dist/pdf-lib.min.js").PDFDropdown>;
    defaultOptionListAppearanceProvider: import("pdf-lib/dist/pdf-lib.min.js").AppearanceProviderFor<import("pdf-lib/dist/pdf-lib.min.js").PDFOptionList>;
    TextAlignment: typeof import("pdf-lib/dist/pdf-lib.min.js").TextAlignment;
    layoutMultilineText: (text: string, { alignment, fontSize, font, bounds }: import("pdf-lib/dist/pdf-lib.min.js").LayoutTextOptions) => import("pdf-lib/dist/pdf-lib.min.js").MultilineTextLayout;
    layoutCombedText: (text: string, { fontSize, font, bounds, cellCount }: import("pdf-lib/dist/pdf-lib.min.js").LayoutCombedTextOptions) => import("pdf-lib/dist/pdf-lib.min.js").CombedTextLayout;
    layoutSinglelineText: (text: string, { alignment, fontSize, font, bounds }: import("pdf-lib/dist/pdf-lib.min.js").LayoutSinglelineTextOptions) => import("pdf-lib/dist/pdf-lib.min.js").SinglelineTextLayout;
    ColorTypes: typeof import("pdf-lib/dist/pdf-lib.min.js").ColorTypes;
    grayscale: (gray: number) => import("pdf-lib/dist/pdf-lib.min.js").Grayscale;
    rgb: (red: number, green: number, blue: number) => import("pdf-lib/dist/pdf-lib.min.js").RGB;
    cmyk: (cyan: number, magenta: number, yellow: number, key: number) => import("pdf-lib/dist/pdf-lib.min.js").CMYK;
    setFillingColor: (color: import("pdf-lib/dist/pdf-lib.min.js").Color) => import("pdf-lib/dist/pdf-lib.min.js").default;
    setStrokingColor: (color: import("pdf-lib/dist/pdf-lib.min.js").Color) => import("pdf-lib/dist/pdf-lib.min.js").default;
    componentsToColor: (comps?: number[] | undefined, scale?: number) => import("pdf-lib/dist/pdf-lib.min.js").Grayscale | import("pdf-lib/dist/pdf-lib.min.js").RGB | import("pdf-lib/dist/pdf-lib.min.js").CMYK | undefined;
    colorToComponents: (color: import("pdf-lib/dist/pdf-lib.min.js").Color) => number[];
    EncryptedPDFError: typeof import("pdf-lib/dist/pdf-lib.min.js").EncryptedPDFError;
    FontkitNotRegisteredError: typeof import("pdf-lib/dist/pdf-lib.min.js").FontkitNotRegisteredError;
    ForeignPageError: typeof import("pdf-lib/dist/pdf-lib.min.js").ForeignPageError;
    RemovePageFromEmptyDocumentError: typeof import("pdf-lib/dist/pdf-lib.min.js").RemovePageFromEmptyDocumentError;
    NoSuchFieldError: typeof import("pdf-lib/dist/pdf-lib.min.js").NoSuchFieldError;
    UnexpectedFieldTypeError: typeof import("pdf-lib/dist/pdf-lib.min.js").UnexpectedFieldTypeError;
    MissingOnValueCheckError: typeof import("pdf-lib/dist/pdf-lib.min.js").MissingOnValueCheckError;
    FieldAlreadyExistsError: typeof import("pdf-lib/dist/pdf-lib.min.js").FieldAlreadyExistsError;
    InvalidFieldNamePartError: typeof import("pdf-lib/dist/pdf-lib.min.js").InvalidFieldNamePartError;
    FieldExistsAsNonTerminalError: typeof import("pdf-lib/dist/pdf-lib.min.js").FieldExistsAsNonTerminalError;
    RichTextFieldReadError: typeof import("pdf-lib/dist/pdf-lib.min.js").RichTextFieldReadError;
    CombedTextLayoutError: typeof import("pdf-lib/dist/pdf-lib.min.js").CombedTextLayoutError;
    ExceededMaxLengthError: typeof import("pdf-lib/dist/pdf-lib.min.js").ExceededMaxLengthError;
    InvalidMaxLengthError: typeof import("pdf-lib/dist/pdf-lib.min.js").InvalidMaxLengthError;
    ImageAlignment: typeof import("pdf-lib/dist/pdf-lib.min.js").ImageAlignment;
    asPDFName: (name: string | import("pdf-lib/dist/pdf-lib.min.js").PDFName) => import("pdf-lib/dist/pdf-lib.min.js").PDFName;
    asPDFNumber: (num: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
    asNumber: (num: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => number;
    drawText: (line: import("pdf-lib/dist/pdf-lib.min.js").PDFHexString, options: import("pdf-lib/dist/pdf-lib.min.js").DrawTextOptions) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    drawLinesOfText: (lines: import("pdf-lib/dist/pdf-lib.min.js").PDFHexString[], options: import("pdf-lib/dist/pdf-lib.min.js").DrawLinesOfTextOptions) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    drawImage: (name: string | import("pdf-lib/dist/pdf-lib.min.js").PDFName, options: {
        x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        width: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        height: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        rotate: import("pdf-lib/dist/pdf-lib.min.js").Rotation;
        xSkew: import("pdf-lib/dist/pdf-lib.min.js").Rotation;
        ySkew: import("pdf-lib/dist/pdf-lib.min.js").Rotation;
        graphicsState?: string | import("pdf-lib/dist/pdf-lib.min.js").PDFName;
    }) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    drawPage: (name: string | import("pdf-lib/dist/pdf-lib.min.js").PDFName, options: {
        x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        xScale: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        yScale: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        rotate: import("pdf-lib/dist/pdf-lib.min.js").Rotation;
        xSkew: import("pdf-lib/dist/pdf-lib.min.js").Rotation;
        ySkew: import("pdf-lib/dist/pdf-lib.min.js").Rotation;
        graphicsState?: string | import("pdf-lib/dist/pdf-lib.min.js").PDFName;
    }) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    drawLine: (options: {
        start: {
            x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
            y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        };
        end: {
            x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
            y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        };
        thickness: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        color: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        dashArray?: (number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber)[];
        dashPhase?: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        lineCap?: import("pdf-lib/dist/pdf-lib.min.js").LineCapStyle;
        graphicsState?: string | import("pdf-lib/dist/pdf-lib.min.js").PDFName;
    }) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    drawRectangle: (options: {
        x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        width: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        height: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        borderWidth: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        color: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        borderColor: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        rotate: import("pdf-lib/dist/pdf-lib.min.js").Rotation;
        xSkew: import("pdf-lib/dist/pdf-lib.min.js").Rotation;
        ySkew: import("pdf-lib/dist/pdf-lib.min.js").Rotation;
        borderLineCap?: import("pdf-lib/dist/pdf-lib.min.js").LineCapStyle;
        borderDashArray?: (number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber)[];
        borderDashPhase?: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        graphicsState?: string | import("pdf-lib/dist/pdf-lib.min.js").PDFName;
    }) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    drawEllipsePath: (config: {
        x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        xScale: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        yScale: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
    }) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    drawEllipse: (options: {
        x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        xScale: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        yScale: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        rotate?: import("pdf-lib/dist/pdf-lib.min.js").Rotation;
        color: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        borderColor: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        borderWidth: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        borderDashArray?: (number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber)[];
        borderDashPhase?: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        graphicsState?: string | import("pdf-lib/dist/pdf-lib.min.js").PDFName;
        borderLineCap?: import("pdf-lib/dist/pdf-lib.min.js").LineCapStyle;
    }) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    drawSvgPath: (path: string, options: {
        x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        rotate?: import("pdf-lib/dist/pdf-lib.min.js").Rotation;
        scale: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber | undefined;
        color: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        borderColor: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        borderWidth: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        borderDashArray?: (number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber)[];
        borderDashPhase?: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        borderLineCap?: import("pdf-lib/dist/pdf-lib.min.js").LineCapStyle;
        graphicsState?: string | import("pdf-lib/dist/pdf-lib.min.js").PDFName;
    }) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    drawCheckMark: (options: {
        x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        size: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        thickness: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        color: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
    }) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    rotateInPlace: (options: {
        width: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        height: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        rotation: 0 | 90 | 180 | 270;
    }) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    drawCheckBox: (options: {
        x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        width: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        height: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        thickness: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        borderWidth: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        markColor: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        color: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        borderColor: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        filled: boolean;
    }) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    drawRadioButton: (options: {
        x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        width: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        height: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        borderWidth: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        dotColor: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        color: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        borderColor: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        filled: boolean;
    }) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    drawButton: (options: {
        x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        width: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        height: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        borderWidth: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        color: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        borderColor: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        textLines: {
            encoded: import("pdf-lib/dist/pdf-lib.min.js").PDFHexString;
            x: number;
            y: number;
        }[];
        textColor: import("pdf-lib/dist/pdf-lib.min.js").Color;
        font: string | import("pdf-lib/dist/pdf-lib.min.js").PDFName;
        fontSize: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
    }) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    drawTextLines: (lines: {
        encoded: import("pdf-lib/dist/pdf-lib.min.js").PDFHexString;
        x: number;
        y: number;
    }[], options: import("pdf-lib/dist/pdf-lib.min.js").DrawTextLinesOptions) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    drawTextField: (options: {
        x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        width: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        height: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        borderWidth: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        color: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        borderColor: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        textLines: {
            encoded: import("pdf-lib/dist/pdf-lib.min.js").PDFHexString;
            x: number;
            y: number;
        }[];
        textColor: import("pdf-lib/dist/pdf-lib.min.js").Color;
        font: string | import("pdf-lib/dist/pdf-lib.min.js").PDFName;
        fontSize: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        padding: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
    }) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    drawOptionList: (options: {
        x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        width: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        height: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        borderWidth: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        color: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        borderColor: import("pdf-lib/dist/pdf-lib.min.js").Color | undefined;
        textLines: {
            encoded: import("pdf-lib/dist/pdf-lib.min.js").PDFHexString;
            x: number;
            y: number;
            height: number;
        }[];
        textColor: import("pdf-lib/dist/pdf-lib.min.js").Color;
        font: string | import("pdf-lib/dist/pdf-lib.min.js").PDFName;
        fontSize: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        lineHeight: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
        selectedLines: number[];
        selectedColor: import("pdf-lib/dist/pdf-lib.min.js").Color;
        padding: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
    }) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator[];
    clip: () => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    clipEvenOdd: () => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    concatTransformationMatrix: (a: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, b: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, c: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, d: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, e: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, f: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    translate: (xPos: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, yPos: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    scale: (xPos: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, yPos: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    rotateRadians: (angle: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    rotateDegrees: (angle: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    skewRadians: (xSkewAngle: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, ySkewAngle: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    skewDegrees: (xSkewAngle: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, ySkewAngle: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    setDashPattern: (dashArray: (number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber)[], dashPhase: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    restoreDashPattern: () => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    LineCapStyle: typeof import("pdf-lib/dist/pdf-lib.min.js").LineCapStyle;
    setLineCap: (style: import("pdf-lib/dist/pdf-lib.min.js").LineCapStyle) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    LineJoinStyle: typeof import("pdf-lib/dist/pdf-lib.min.js").LineJoinStyle;
    setLineJoin: (style: import("pdf-lib/dist/pdf-lib.min.js").LineJoinStyle) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    setGraphicsState: (state: string | import("pdf-lib/dist/pdf-lib.min.js").PDFName) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    pushGraphicsState: () => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    popGraphicsState: () => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    setLineWidth: (width: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    appendBezierCurve: (x1: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, y1: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, x2: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, y2: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, x3: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, y3: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    appendQuadraticCurve: (x1: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, y1: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, x2: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, y2: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    closePath: () => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    moveTo: (xPos: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, yPos: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    lineTo: (xPos: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, yPos: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    rectangle: (xPos: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, yPos: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, width: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, height: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    square: (xPos: number, yPos: number, size: number) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    stroke: () => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    fill: () => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    fillAndStroke: () => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    endPath: () => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    nextLine: () => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    moveText: (x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    showText: (text: import("pdf-lib/dist/pdf-lib.min.js").PDFHexString) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    beginText: () => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    endText: () => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    setFontAndSize: (name: string | import("pdf-lib/dist/pdf-lib.min.js").PDFName, size: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    setCharacterSpacing: (spacing: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    setWordSpacing: (spacing: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    setCharacterSqueeze: (squeeze: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    setLineHeight: (lineHeight: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    setTextRise: (rise: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    TextRenderingMode: typeof import("pdf-lib/dist/pdf-lib.min.js").TextRenderingMode;
    setTextRenderingMode: (mode: import("pdf-lib/dist/pdf-lib.min.js").TextRenderingMode) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    setTextMatrix: (a: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, b: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, c: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, d: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, e: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, f: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    rotateAndSkewTextRadiansAndTranslate: (rotationAngle: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, xSkewAngle: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, ySkewAngle: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    rotateAndSkewTextDegreesAndTranslate: (rotationAngle: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, xSkewAngle: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, ySkewAngle: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, x: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, y: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    drawObject: (name: string | import("pdf-lib/dist/pdf-lib.min.js").PDFName) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    setFillingGrayscaleColor: (gray: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    setStrokingGrayscaleColor: (gray: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    setFillingRgbColor: (red: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, green: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, blue: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    setStrokingRgbColor: (red: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, green: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, blue: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    setFillingCmykColor: (cyan: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, magenta: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, yellow: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, key: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    setStrokingCmykColor: (cyan: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, magenta: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, yellow: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber, key: number | import("pdf-lib/dist/pdf-lib.min.js").PDFNumber) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    beginMarkedContent: (tag: string | import("pdf-lib/dist/pdf-lib.min.js").PDFName) => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    endMarkedContent: () => import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    RotationTypes: typeof import("pdf-lib/dist/pdf-lib.min.js").RotationTypes;
    radians: (radianAngle: number) => import("pdf-lib/dist/pdf-lib.min.js").Radians;
    degrees: (degreeAngle: number) => import("pdf-lib/dist/pdf-lib.min.js").Degrees;
    degreesToRadians: (degree: number) => number;
    radiansToDegrees: (radian: number) => number;
    toRadians: (rotation: import("pdf-lib/dist/pdf-lib.min.js").Rotation) => number;
    toDegrees: (rotation: import("pdf-lib/dist/pdf-lib.min.js").Rotation) => number;
    reduceRotation: (degreeAngle?: number) => 0 | 180 | 90 | 270;
    adjustDimsForRotation: (dims: {
        width: number;
        height: number;
    }, degreeAngle?: number) => {
        width: number;
        height: number;
    };
    rotateRectangle: (rectangle: {
        x: number;
        y: number;
        width: number;
        height: number;
    }, borderWidth?: number, degreeAngle?: number) => {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    PageSizes: {
        "4A0": [number, number];
        "2A0": [number, number];
        A0: [number, number];
        A1: [number, number];
        A2: [number, number];
        A3: [number, number];
        A4: [number, number];
        A5: [number, number];
        A6: [number, number];
        A7: [number, number];
        A8: [number, number];
        A9: [number, number];
        A10: [number, number];
        B0: [number, number];
        B1: [number, number];
        B2: [number, number];
        B3: [number, number];
        B4: [number, number];
        B5: [number, number];
        B6: [number, number];
        B7: [number, number];
        B8: [number, number];
        B9: [number, number];
        B10: [number, number];
        C0: [number, number];
        C1: [number, number];
        C2: [number, number];
        C3: [number, number];
        C4: [number, number];
        C5: [number, number];
        C6: [number, number];
        C7: [number, number];
        C8: [number, number];
        C9: [number, number];
        C10: [number, number];
        RA0: [number, number];
        RA1: [number, number];
        RA2: [number, number];
        RA3: [number, number];
        RA4: [number, number];
        SRA0: [number, number];
        SRA1: [number, number];
        SRA2: [number, number];
        SRA3: [number, number];
        SRA4: [number, number];
        Executive: [number, number];
        Folio: [number, number];
        Legal: [number, number];
        Letter: [number, number];
        Tabloid: [number, number];
    };
    BlendMode: typeof import("pdf-lib/dist/pdf-lib.min.js").BlendMode;
    ParseSpeeds: typeof import("pdf-lib/dist/pdf-lib.min.js").ParseSpeeds;
    StandardFonts: typeof import("pdf-lib/dist/pdf-lib.min.js").StandardFonts;
    CharCodes: typeof import("pdf-lib/dist/pdf-lib.min.js").CharCodes;
    PDFContext: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFContext;
    PDFObjectCopier: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFObjectCopier;
    PDFWriter: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFWriter;
    PDFStreamWriter: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFStreamWriter;
    PDFHeader: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFHeader;
    PDFTrailer: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFTrailer;
    PDFTrailerDict: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFTrailerDict;
    PDFCrossRefSection: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFCrossRefSection;
    StandardFontEmbedder: typeof import("pdf-lib/dist/pdf-lib.min.js").StandardFontEmbedder;
    CustomFontEmbedder: typeof import("pdf-lib/dist/pdf-lib.min.js").CustomFontEmbedder;
    CustomFontSubsetEmbedder: typeof import("pdf-lib/dist/pdf-lib.min.js").CustomFontSubsetEmbedder;
    FileEmbedder: typeof import("pdf-lib/dist/pdf-lib.min.js").FileEmbedder;
    AFRelationship: typeof import("pdf-lib/dist/pdf-lib.min.js").AFRelationship;
    JpegEmbedder: typeof import("pdf-lib/dist/pdf-lib.min.js").JpegEmbedder;
    PngEmbedder: typeof import("pdf-lib/dist/pdf-lib.min.js").PngEmbedder;
    PDFPageEmbedder: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFPageEmbedder;
    ViewerPreferences: typeof import("pdf-lib/dist/pdf-lib.min.js").ViewerPreferences;
    NonFullScreenPageMode: typeof import("pdf-lib/dist/pdf-lib.min.js").NonFullScreenPageMode;
    ReadingDirection: typeof import("pdf-lib/dist/pdf-lib.min.js").ReadingDirection;
    PrintScaling: typeof import("pdf-lib/dist/pdf-lib.min.js").PrintScaling;
    Duplex: typeof import("pdf-lib/dist/pdf-lib.min.js").Duplex;
    PDFObject: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFObject;
    PDFBool: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFBool;
    PDFNumber: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFNumber;
    PDFString: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFString;
    PDFHexString: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFHexString;
    PDFName: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFName;
    PDFNull: {
        asNull(): null;
        clone(): /*elided*/ any;
        toString(): string;
        sizeInBytes(): number;
        copyBytesInto(buffer: Uint8Array, offset: number): number;
    };
    PDFArray: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFArray;
    PDFDict: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFDict;
    PDFRef: typeof PDFRef;
    PDFInvalidObject: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFInvalidObject;
    PDFStream: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFStream;
    PDFRawStream: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFRawStream;
    PDFCatalog: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFCatalog;
    PDFContentStream: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFContentStream;
    PDFCrossRefStream: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFCrossRefStream;
    PDFObjectStream: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFObjectStream;
    PDFPageTree: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFPageTree;
    PDFPageLeaf: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFPageLeaf;
    PDFFlateStream: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFFlateStream;
    PDFOperator: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFOperator;
    PDFOperatorNames: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFOperatorNames;
    PDFObjectParser: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFObjectParser;
    PDFObjectStreamParser: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFObjectStreamParser;
    PDFParser: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFParser;
    PDFXRefStreamParser: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFXRefStreamParser;
    decodePDFRawStream: ({ dict, contents }: import("pdf-lib/dist/pdf-lib.min.js").PDFRawStream) => import("pdf-lib/cjs/core/streams/Stream").StreamType;
    MethodNotImplementedError: typeof import("pdf-lib/dist/pdf-lib.min.js").MethodNotImplementedError;
    PrivateConstructorError: typeof import("pdf-lib/dist/pdf-lib.min.js").PrivateConstructorError;
    UnexpectedObjectTypeError: typeof import("pdf-lib/dist/pdf-lib.min.js").UnexpectedObjectTypeError;
    UnsupportedEncodingError: typeof import("pdf-lib/dist/pdf-lib.min.js").UnsupportedEncodingError;
    ReparseError: typeof import("pdf-lib/dist/pdf-lib.min.js").ReparseError;
    MissingCatalogError: typeof import("pdf-lib/dist/pdf-lib.min.js").MissingCatalogError;
    MissingPageContentsEmbeddingError: typeof import("pdf-lib/dist/pdf-lib.min.js").MissingPageContentsEmbeddingError;
    UnrecognizedStreamTypeError: typeof import("pdf-lib/dist/pdf-lib.min.js").UnrecognizedStreamTypeError;
    PageEmbeddingMismatchedContextError: typeof import("pdf-lib/dist/pdf-lib.min.js").PageEmbeddingMismatchedContextError;
    PDFArrayIsNotRectangleError: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFArrayIsNotRectangleError;
    InvalidPDFDateStringError: typeof import("pdf-lib/dist/pdf-lib.min.js").InvalidPDFDateStringError;
    InvalidTargetIndexError: typeof import("pdf-lib/dist/pdf-lib.min.js").InvalidTargetIndexError;
    CorruptPageTreeError: typeof import("pdf-lib/dist/pdf-lib.min.js").CorruptPageTreeError;
    IndexOutOfBoundsError: typeof import("pdf-lib/dist/pdf-lib.min.js").IndexOutOfBoundsError;
    InvalidAcroFieldValueError: typeof import("pdf-lib/dist/pdf-lib.min.js").InvalidAcroFieldValueError;
    MultiSelectValueError: typeof import("pdf-lib/dist/pdf-lib.min.js").MultiSelectValueError;
    MissingDAEntryError: typeof import("pdf-lib/dist/pdf-lib.min.js").MissingDAEntryError;
    MissingTfOperatorError: typeof import("pdf-lib/dist/pdf-lib.min.js").MissingTfOperatorError;
    NumberParsingError: typeof import("pdf-lib/dist/pdf-lib.min.js").NumberParsingError;
    PDFParsingError: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFParsingError;
    NextByteAssertionError: typeof import("pdf-lib/dist/pdf-lib.min.js").NextByteAssertionError;
    PDFObjectParsingError: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFObjectParsingError;
    PDFInvalidObjectParsingError: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFInvalidObjectParsingError;
    PDFStreamParsingError: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFStreamParsingError;
    UnbalancedParenthesisError: typeof import("pdf-lib/dist/pdf-lib.min.js").UnbalancedParenthesisError;
    StalledParserError: typeof import("pdf-lib/dist/pdf-lib.min.js").StalledParserError;
    MissingPDFHeaderError: typeof import("pdf-lib/dist/pdf-lib.min.js").MissingPDFHeaderError;
    MissingKeywordError: typeof import("pdf-lib/dist/pdf-lib.min.js").MissingKeywordError;
    PDFAnnotation: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFAnnotation;
    PDFWidgetAnnotation: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFWidgetAnnotation;
    AppearanceCharacteristics: typeof import("pdf-lib/dist/pdf-lib.min.js").AppearanceCharacteristics;
    AnnotationFlags: typeof import("pdf-lib/dist/pdf-lib.min.js").AnnotationFlags;
    PDFAcroButton: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFAcroButton;
    PDFAcroCheckBox: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFAcroCheckBox;
    PDFAcroChoice: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFAcroChoice;
    PDFAcroComboBox: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFAcroComboBox;
    PDFAcroField: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFAcroField;
    PDFAcroForm: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFAcroForm;
    PDFAcroListBox: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFAcroListBox;
    PDFAcroNonTerminal: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFAcroNonTerminal;
    PDFAcroPushButton: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFAcroPushButton;
    PDFAcroRadioButton: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFAcroRadioButton;
    PDFAcroSignature: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFAcroSignature;
    PDFAcroTerminal: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFAcroTerminal;
    PDFAcroText: typeof import("pdf-lib/dist/pdf-lib.min.js").PDFAcroText;
    AcroFieldFlags: typeof import("pdf-lib/dist/pdf-lib.min.js").AcroFieldFlags;
    AcroButtonFlags: typeof import("pdf-lib/dist/pdf-lib.min.js").AcroButtonFlags;
    AcroTextFlags: typeof import("pdf-lib/dist/pdf-lib.min.js").AcroTextFlags;
    AcroChoiceFlags: typeof import("pdf-lib/dist/pdf-lib.min.js").AcroChoiceFlags;
    createPDFAcroFields: (kidDicts?: import("pdf-lib/dist/pdf-lib.min.js").PDFArray | undefined) => [import("pdf-lib/dist/pdf-lib.min.js").PDFAcroField, PDFRef][];
    createPDFAcroField: (dict: import("pdf-lib/dist/pdf-lib.min.js").PDFDict, ref: PDFRef) => import("pdf-lib/dist/pdf-lib.min.js").PDFAcroField;
    Cache: typeof import("pdf-lib/dist/pdf-lib.min.js").Cache;
    last: <T>(array: T[]) => T;
    typedArrayFor: (value: string | Uint8Array) => Uint8Array;
    mergeIntoTypedArray: (...arrays: (string | Uint8Array)[]) => Uint8Array;
    mergeUint8Arrays: (arrays: Uint8Array[]) => Uint8Array;
    arrayAsString: (array: Uint8Array | number[]) => string;
    byAscendingId: <T extends {
        id: any;
    }>(a: T, b: T) => number;
    sortedUniq: <T>(array: T[], indexer: (elem: T) => any) => T[];
    reverseArray: (array: Uint8Array) => Uint8Array;
    sum: (array: number[] | Uint8Array) => number;
    range: (start: number, end: number) => number[];
    pluckIndices: <T>(arr: T[], indices: number[]) => T[];
    canBeConvertedToUint8Array: (input: any) => input is string | Uint8Array | ArrayBuffer;
    toUint8Array: (input: string | ArrayBuffer | Uint8Array) => Uint8Array;
    waitForTick: () => Promise<void>;
    toCharCode: (character: string) => number;
    toCodePoint: (character: string) => number | undefined;
    toHexStringOfMinLength: (num: number, minLength: number) => string;
    toHexString: (num: number) => string;
    charFromCode: (code: number) => string;
    charFromHexCode: (hex: string) => string;
    padStart: (value: string, length: number, padChar: string) => string;
    copyStringIntoBuffer: (str: string, buffer: Uint8Array, offset: number) => number;
    addRandomSuffix: (prefix: string, suffixLength?: number) => string;
    escapeRegExp: (str: string) => string;
    cleanText: (text: string) => string;
    escapedNewlineChars: string[];
    newlineChars: string[];
    isNewlineChar: (text: string) => boolean;
    lineSplit: (text: string) => string[];
    mergeLines: (text: string) => string;
    charAtIndex: (text: string, index: number) => [string, number];
    charSplit: (text: string) => string[];
    breakTextIntoLines: (text: string, wordBreaks: string[], maxWidth: number, computeWidthOfText: (t: string) => number) => string[];
    parseDate: (dateStr: string) => Date | undefined;
    findLastMatch: (value: string, regex: RegExp) => {
        match: RegExpMatchArray | undefined;
        pos: number;
    };
    utf8Encode: (input: string, byteOrderMark?: boolean) => Uint8Array;
    utf16Encode: (input: string, byteOrderMark?: boolean) => Uint16Array;
    isWithinBMP: (codePoint: number) => boolean;
    hasSurrogates: (codePoint: number) => boolean;
    highSurrogate: (codePoint: number) => number;
    lowSurrogate: (codePoint: number) => number;
    utf16Decode: (input: Uint8Array, byteOrderMark?: boolean) => string;
    hasUtf16BOM: (bytes: Uint8Array) => boolean;
    numberToString: (num: number) => string;
    sizeInBytes: (n: number) => number;
    bytesFor: (n: number) => Uint8Array;
    error: (msg: string) => never;
    encodeToBase64: (bytes: Uint8Array) => string;
    decodeFromBase64: (base64: string) => Uint8Array;
    decodeFromBase64DataUri: (dataUri: string) => Uint8Array;
    values: (obj: any) => any[];
    StandardFontValues: any[];
    isStandardFont: (input: any) => input is import("@pdf-lib/standard-fonts").FontNames;
    rectanglesAreEqual: (a: {
        x: number;
        y: number;
        width: number;
        height: number;
    }, b: {
        x: number;
        y: number;
        width: number;
        height: number;
    }) => boolean;
    backtick: (val: any) => string;
    singleQuote: (val: any) => string;
    createValueErrorMsg: (value: any, valueName: string, values: (string | number | boolean | null | undefined)[]) => string;
    assertIsOneOf: (value: any, valueName: string, allowedValues: (string | number | boolean | null | undefined)[] | {
        [key: string]: string | number | boolean | null | undefined;
    }) => void;
    assertIsOneOfOrUndefined: (value: any, valueName: string, allowedValues: (string | number | boolean | null | undefined)[] | {
        [key: string]: string | number | boolean | null | undefined;
    }) => void;
    assertIsSubset: (values: any[], valueName: string, allowedValues: (string | number | boolean | null | undefined)[] | {
        [key: string]: string | number | boolean | null | undefined;
    }) => void;
    getType: (val: any) => any;
    isType: (value: any, type: import("pdf-lib/dist/pdf-lib.min.js").TypeDescriptor) => boolean;
    createTypeErrorMsg: (value: any, valueName: string, types: import("pdf-lib/dist/pdf-lib.min.js").TypeDescriptor[]) => string;
    assertIs: (value: any, valueName: string, types: import("pdf-lib/dist/pdf-lib.min.js").TypeDescriptor[]) => void;
    assertOrUndefined: (value: any, valueName: string, types: import("pdf-lib/dist/pdf-lib.min.js").TypeDescriptor[]) => void;
    assertEachIs: (values: any[], valueName: string, types: import("pdf-lib/dist/pdf-lib.min.js").TypeDescriptor[]) => void;
    assertRange: (value: any, valueName: string, min: number, max: number) => void;
    assertRangeOrUndefined: (value: any, valueName: string, min: number, max: number) => void;
    assertMultiple: (value: any, valueName: string, multiplier: number) => void;
    assertInteger: (value: any, valueName: string) => void;
    assertPositive: (value: number, valueName: string) => void;
    pdfDocEncodingDecode: (bytes: Uint8Array) => string;
}>;
type PDFOutlineTo = number | [pageIndex: number, xPercentage: number, yPercentage: number];
export interface PDFOutlineItem {
    title: string;
    to: PDFOutlineTo;
    italic?: boolean;
    bold?: boolean;
}
export interface PDFOutlineItemWithChildren extends Omit<PDFOutlineItem, 'to'> {
    to?: PDFOutlineTo;
    children: PDFOutline[];
    open: boolean;
}
export type PDFOutline = PDFOutlineItem | PDFOutlineItemWithChildren;
export declare const setOutline: (doc: PDFDocument, outlines: readonly PDFOutline[]) => Promise<void>;
export {};
